#!/usr/bin/env python3

import os
import sys
from utils import *


out_dir = get_out_dir(config)
no_rep = config['cellcoal']['no_rep']

rule all:
    input:
        os.path.join(out_dir, 'clock_test_summary.tsv')
            

rule create_cellcoal_config:
    output:
        os.path.join(out_dir, 'cellcoal_parameters')
    params:
        template = config['cellcoal']['parameter']
    run:
        cc_config = get_cellcoal_config(config, params.template, out_dir)
        with open(output[0], 'w') as f:
            f.write(cc_config)


rule run_cellcoal:
    input:
        os.path.join(out_dir, 'cellcoal_parameters')
    output:
        expand(os.path.join(out_dir, 'vcf_dir', 'vcf.{run}'),
            run=[f'{i+1:04d}' for i in range(no_rep)])
    params:
        exe = config['cellcoal']['exe']
    resources:
        mem_mb = 16384
    shell:
        '{params.exe} -F{input}'


rule vcf_to_nex:
    input:
        os.path.join(out_dir, 'vcf_dir', 'vcf.{run}')
    output:
        expand(os.path.join(out_dir, 'nxs_dir', 'nxs.{{run}}.{model}'),
            model=['clock', 'noClock']) 
    params:
        ngen = config['mrbayes'].get('ngen', 1000000),
        ss = config['mrbayes'].get('ss', False)
    resources:
        mem_mb = 1024
    run:
        vcf_to_nex(input[0], output, params.ngen, params.ss)    


if config.get('hpc', False):
    rule run_mrbayes_hpc:
        input:
            os.path.join(out_dir, 'nxs_dir', 'nxs.{run}.{model}')
        output:
            os.path.join(out_dir, 'nxs_dir', 'nxs.{run}.{model}.lstat')
        conda:
            'envs/mrbayes.yaml'
        envmodules:
            'gcc/6.4.0',
            'openmpi/2.1.1',
            'mrbayes/3.2.7'
        threads:
            4
        resources:
            mem_mb=4096
        shell:
            'mpirun mb {input} > {input}.log'
else:
    rule run_mrbayes:
        input:
            os.path.join(out_dir, 'nxs_dir', 'nxs.{run}.{model}')
        output:
            os.path.join(out_dir, 'nxs_dir', 'nxs.{run}.{model}.lstat')
        params:
            mb_exe = config['mrbayes']['exe']
        resources:
            mem_mb=16384
        shell:
            '{params.mb_exe} {input} > {input}.log }'


rule merge_results:
    input:
        expand(os.path.join(out_dir, 'nxs_dir', 'nxs.{run}.{model}.lstat'),
            run=[f'{i+1:04d}' for i in range(no_rep)], model=['clock', 'noClock'])
    output:
        os.path.join(out_dir, 'clock_test_summary.tsv')
    resources:
        mem_mb=2048
    run:
        get_Bayes_factor(input, output[0])

