#!/usr/bin/env python3

import os
import sys
from utils import *

cc_params = load_config(config['cellcoal']['parameters'])
n = int(cc_params['number of replicates'])
cc_out = cc_params['results folder name']


rule all:
    input:
        os.path.join(cc_out, 'clock_test_summary.tsv')
            

rule run_cellcoal:
    output:
        expand(os.path.join(cc_out, 'vcf_dir', 'vcf.{run}'),
            run=[f'{i+1:04d}' for i in range(n)])
    params:
        exe = config['cellcoal']['exe'],
        param_file = config['cellcoal']['parameters'],
        outdir = cc_out
    shell:
        '{params.exe} -F{params.param_file} -o{params.outdir}'


rule vcf_to_nex:
    input:
        os.path.join(cc_out, 'vcf_dir', 'vcf.{run}')
    output:
        expand(os.path.join(cc_out, 'nxs_dir', 'nxs.{{run}}.{model}'),
            model=['clock', 'noClock']) 
    params:
        ngen = config['mrbayes'].get('ngen', 1000000),
        ss = config['mrbayes'].get('ss', False)
    run:
        vcf_to_nex(input[0], output, params.ngen, params.ss)    


if config.get('hpc', False):
    rule run_mrbayes:
        input:
            os.path.join(cc_out, 'nxs_dir', 'nxs.{run}.{model}')
        output:
            os.path.join(cc_out, 'nxs_dir', 'nxs.{run}.{model}.lstat')
        conda:
            'envs/open_mpi.yaml'
        envmodules:
            'gcc/6.4.0',
            'openmpi/2.1.1',
            'mrbayes/3.2.7'
        threads:
            4
        shell:
            'mpirun mb {input} > {input}.log'
else:
    rule run_mrbayes:
        input:
            os.path.join(cc_out, 'nxs_dir', 'nxs.{run}.{model}')
        output:
            os.path.join(cc_out, 'nxs_dir', 'nxs.{run}.{model}.lstat')
        params:
            mb_exe = config['mrbayes']['exe']
        shell:
            '{params.mb_exe} {input} > {input}.log }'


rule merge_results:
    input:
        expand(os.path.join(cc_out, 'nxs_dir', 'nxs.{run}.{model}.lstat'),
            run=[f'{i+1:04d}' for i in range(n)], model=['clock', 'noClock'])
    output:
        os.path.join(cc_out, 'clock_test_summary.tsv')
    run:
        get_Bayes_factor(input, output[0])

