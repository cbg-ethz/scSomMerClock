#!/usr/bin/env python3

import os
from scripts.utils import get_out_dir

SCRIPT_DIR = 'scripts'

RUNS = [f'{i+1:04d}' for i in range(config['cellcoal']['no_rep'])]
TREES = [i for i,j in config['tree'].items() if j['run']]
CELL_NO = config['cellcoal']['model']['no_cells']
BULK = CELL_NO >= 100 and config['cellcoal']['NGS']['seq_cov'] <= 1

W_MAXS = config.get('poisson', {}).get('w_max', [1000])
if isinstance(W_MAXS, (int, float)):
    W_MAXS = [W_MAXS]

out_dir, filter_dir = get_out_dir(config, BULK)
base_dir = os.path.join(out_dir, filter_dir)

def get_final_files(wildcards):
    files = []
    for tree in TREES:
        if config.get('paup', {}).get('run', False):
            # Just take the true true as input for PAIP*
            if 'cellcoal' in TREES and tree != 'cellcoal':
                pass
            else:
                files.append(os.path.join(f'paup_{tree}', 'paup.summary.tsv'))
        if config.get('poisson', {}).get('tree', True) or \
                config.get('poisson', {}).get('run', False):
            files.append(
                os.path.join(f'poissonTree_{tree}', 'poissonTree.summary.tsv'))
    if config.get('poisson', {}).get('dispersion', False) or \
                config.get('poisson', {}).get('run', False):
        files.append('poissonDisp.summary.tsv')

    return [os.path.join(base_dir, i) for i in files]


if BULK:
    rule all:
        input:
            os.path.join(out_dir, 'bulk_summary.tsv')
else:
    rule all:
        input:
            os.path.join(base_dir, 'final_summary.tsv'),

rule merge_summary_files:
    input:
        get_final_files
    output:
        os.path.join(base_dir, 'final_summary.tsv')
    resources:
        mem_mb = 4096,
        runtime = 20,
    script:
        f'{SCRIPT_DIR}/merge_summaries.py'


# ------------------------------- CELLCOAL -------------------------------------

rule create_cellcoal_config:
    output:
        cellcoal = 'cellcoal_parameters',
        snakemake ='snakemake_config.yaml',
    params:
        template = config['cellcoal'] \
            .get('parameter', 'cellcoal_parameters.template'),
        out_dir = out_dir,
    resources:
        mem_mb = 1024
    script:
        f'{SCRIPT_DIR}/get_cellcoal_config.py'


rule run_cellcoal:
    input:
        cellcoal = 'cellcoal_parameters',
        snakemake ='snakemake_config.yaml',
    output:
        expand(os.path.join(out_dir, 'vcf_dir', 'vcf.{run}'), run=RUNS),
        expand(os.path.join(out_dir, 'trees_dir', 'trees.{run}'), run=RUNS),
    resources:
        mem_mb = 16384 \
            * min(5, (1 + config['cellcoal']['no_rep'] // 1000) * (BULK + 1)),
        runtime = 1200 if CELL_NO >= 100 else 300,
    params:
        exe = config['cellcoal']['exe'],
    shell:
        'mkdir -p {out_dir} && '
        '{params.exe} -F{input} > cellcoal.out 2>&1 && '
        'mv cellcoal.out {out_dir}/cellcoal.out && '
        'mv {input.cellcoal} {out_dir}/config_cellcoal && '
        'mv {input.snakemake} {out_dir}/config_snakemake'


# --------------------------------- BULK ---------------------------------------


rule VCF_to_VAF:
    input:
        vcf = os.path.join(out_dir, 'vcf_dir', 'vcf.{run}')
    output:
        vaf = os.path.join(out_dir, 'vaf_dir', 'vaf.{run}')
    script:
        f'{SCRIPT_DIR}/VCF_to_VAF.py'


rule run_mobster:
    input:
        os.path.join(out_dir, 'vaf_dir', 'vaf.{run}')
    output:
        os.path.join(out_dir, 'vaf_dir', 'vaf.{run}.mobster')
    threads: 2
    resources:
        mem_mb = 24576,
        runtime = 120,
    params:
        depth = CELL_NO * config['cellcoal']['NGS']['seq_cov'],
    shell:
        '{SCRIPT_DIR}/run_williams2016.R {input} {output} --depth {params.depth}'


rule merge_mobster:
    input:
        expand(os.path.join(out_dir, 'vaf_dir', 'vaf.{run}.mobster'), \
            run=RUNS)
    output:
        os.path.join(out_dir, 'bulk_summary.tsv')
    script:
        f'{SCRIPT_DIR}/merge_bulk_summaries.py'


# -------------------------- DATA POSTPROCESSING -------------------------------

rule generate_overview_file:
    input:
        os.path.join(out_dir, 'vcf_dir', 'vcf.0001')
    output:
        stats = os.path.join(base_dir, 'data_overview.tsv'),
        ADO = os.path.join(base_dir, 'ADO_overview.tsv')
    resources:
        runtime = 30
    run:
        cols = ['run', 'muts_cells', 'muts_outgrp', 'muts_false',
            'sides', 'TP_sides', 'FP_sides', 'TN_sides', 'FN_sides', 'MS_sides']
        with open(output.stats, 'w') as f:
            f.write('\t'.join(cols) + '\n')

        cells = '\t'.join([f'tumcell{i+1:0>4}' for i in range(CELL_NO)] \
            + ['healthycell'])
        with open(output.ADO, 'w') as f:
            f.write('run\t' + cells + '\n')


rule postprocess_vcf:
    input:
        vcf = os.path.join(out_dir, 'vcf_dir', 'vcf.{run}'),
        stats = ancient(os.path.join(base_dir, 'data_overview.tsv')),
        ADO = ancient(os.path.join(base_dir, 'ADO_overview.tsv'))
    output:
        os.path.join(base_dir, 'vcf_dir', 'vcf.{run}.final.gz')
    resources:
        runtime = 120,
    group: 'vcf'
    params:
        dp = config.get('SNP_filter', {}).get('depth', 1),
        gq = config.get('SNP_filter', {}).get('quality', 0),
        s_dp = config.get('SNP_filter', {}).get('singleton_depth', None),
        s_alt = config.get('SNP_filter', {}).get('singleton_alts', None),
        singletons = config.get('SNP_filter', {}).get('singletons', False),
    script:
        f'{SCRIPT_DIR}/postprocess_vcf.py'


def get_repl_data(wildcards):
    vcf = os.path.join(base_dir, 'vcf_dir',
        'vcf.{wildcards.run}.final.gz'.format(wildcards=wildcards))

    if wildcards.tree == 'cellphy':
        tree = os.path.join(base_dir, 'cellphy_dir',
            'cellphy_tree.{wildcards.run}.raxml.bestTree' \
                .format(wildcards=wildcards))
    elif wildcards.tree == 'scite':
        tree = os.path.join(base_dir, 'scite_dir',
            'scite_tree.{wildcards.run}_ml0.newick'.format(wildcards=wildcards))
    else:
        tree = os.path.join(out_dir, 'trees_dir', 'trees.{wildcards.run}' \
            .format(wildcards=wildcards))

    return {'tree': tree, 'vcf': vcf}

# -------------------------------- SCITE ---------------------------------------

rule run_scite:
    input:
        os.path.join(base_dir, 'vcf_dir', 'vcf.{run}.final.gz')
    output:
        os.path.join(base_dir, 'scite_dir', 'scite_tree.{run}_ml0.newick')
    resources:
        mem_mb = 6144,
        runtime = lambda wildcards, attempt: attempt * 1080,
    params:
        steps = config['tree']['scite'].get('steps', 1E6),
        exe = config['tree']['scite'].get('exe', './infSCITE'),
    script:
        f'{SCRIPT_DIR}/run_scite.py'


# ------------------------------- CELLPHY --------------------------------------

rule run_cellphy:
    input:
        os.path.join(base_dir, 'vcf_dir', 'vcf.{run}.final.gz')
    output:
        os.path.join(base_dir, 'cellphy_dir',
            'cellphy_tree.{run}.raxml.bestTree')
    resources:
        mem_mb = 2048,
        runtime =  lambda wildcards, attempt: attempt * 60,
    threads: 1 if config['tree']['cellphy'].get('command', 'FAST') == 'FAST' \
        else 4
    params:
        prefix = lambda wildcards: os.sep.join([base_dir, 'cellphy_dir',
            'cellphy_tree.{wildcards.run}'.format(wildcards=wildcards)]),
        exe = config['tree']['cellphy'].get('exe', './cellphy.sh'),
        cmd = config['tree']['cellphy'].get('command', 'SEARCH'),
    shell:
        '{params.exe} {params.cmd} -o healthycell -r -t {threads} -z -l -y '
        '-p {params.prefix} {input} > /dev/null && '
        'rm -f {params.prefix}.raxml.startTree {params.prefix}.raxml.mlTrees '
        '{params.prefix}.raxml.bestModel {params.prefix}.raxml.rba'


# ------------------------------- POISSON --------------------------------------

rule run_poisson:
    input:
        expand(os.path.join(base_dir, 'vcf_dir', 'vcf.{run}.final.gz'), run=RUNS)
    output:
        os.path.join(base_dir, 'poissonDisp.summary.tsv')
    resources:
        mem_mb = 2048,
        runtime = 120,
    params:
        exclude = config.get('poisson', {}).get('exclude', ''),
        include = config.get('poisson', {}).get('include', ''),
    script:
        f'{SCRIPT_DIR}/get_poisson_LRT.py'


# --------------------------- POISSON TREE -------------------------------------


def get_errors_bulk(wildcards):
    errors = {'FN': None, 'FP': None}
    if wildcards.tree == 'cellcoal' and config['cellcoal']['scWGA']['errors'] == True:
        ADO_rate = config['cellcoal']['scWGA']['ADO_rate']
        if isinstance(ADO_rate, float):
            errors['FN'] = ADO_rate / 2
        elif isinstance(ADO_rate, list):
            errors['FN'] = ADO_rate[0] / 2

        ampl_error = config['cellcoal']['scWGA']['ampl_error']
        if isinstance(ampl_error, float):
            errors['FP'] = ampl_error
        elif isinstance(ampl_error, list):
            errors['FP'] = ampl_error[0]

        errors['FP'] += config['cellcoal']['NGS']['seq_error']
    return errors


rule run_poissonTree:
    input:
        unpack(get_repl_data)
    output:
        os.path.join(base_dir, 'poissonTree_{tree}',
            'poissonTree.{run}.LRT.txt')
    envmodules:
        'ete/3.1.2',
    threads: 1
    resources:
        mem_mb = 768,
        runtime = lambda wildcards, attempt: attempt * 30,
    #group: 'treeTest'
    params:
        exclude = config.get('poisson', {}).get('exclude', ''),
        include = config.get('poisson', {}).get('include', ''),
        w_maxs = W_MAXS,
        errors = get_errors_bulk
    script:
        f'{SCRIPT_DIR}/get_poisson_tree_LRT.py'


rule merge_poissonTree_tree:
    input:
        expand(os.path.join(base_dir, 'poissonTree_{{tree}}',
                'poissonTree.{run}.LRT.txt'), run=RUNS)
    output:
        os.path.join(base_dir, 'poissonTree_{tree}', 'poissonTree.summary.tsv')
    resources:
        mem_mb = 2048,
    script:
        f'{SCRIPT_DIR}/merge_poisson_tree_LRT.py'


# -------------------------------- PAUP ----------------------------------------

rule run_PAUP:
    input:
        unpack(get_repl_data)
    output:
        os.path.join(base_dir, 'paup_{tree}', 'paup.{run}')
    resources:
        mem_mb = 1024,
        runtime = 30,
    params:
        paup_exe = config.get('paup', {}).get('exe', 'paup'),
        exclude = config.get('poisson', {}).get('exclude', ''),
        include = config.get('poisson', {}).get('include', ''),
    script:
        f'{SCRIPT_DIR}/get_PAUP_LRT.py'


rule merge_PAUP_results:
    input:
        expand(os.path.join(base_dir, 'paup_{{tree}}', 'paup.{run}'),
            run=RUNS)
    output:
        os.path.join(base_dir, 'paup_{tree}', 'paup.summary.tsv')
    resources:
        mem_mb = 2048
    script:
        f'{SCRIPT_DIR}/merge_PAUP_LRT.py'